

一、Python 对象

1、__init__()方法：

__init__()是一个特殊方法(special method)。Python有一些特殊方法。Python会特殊的对待它们。特殊方法的特点是名字前后有两个下划线。
如果你在类中定义了__init__()这个方法，创建对象时，Python会自动调用这个方法。这个过程也叫初始化。

2、对象的属性

Python内置类属性
__dict__ : 类的属性（包含一个字典，由类的数据属性组成）
__doc__ :类的文档字符串
__name__: 类名
__module__: 类定义所在的模块（类的全名是'__main__.className'，如果类位于一个导入模块mymod中，那么className.__module__ 等于 mymod）
__bases__ : 类的所有父类构成元素（包含了以个由所有父类组成的元组）

当定义类的方法时，必须要传递一个self的参数。这个参数指代的就是类的一个对象。我们可以通过操纵self，来修改某个对象的性质。
比如用类来新建一个对象，即下面例子中的li_lei, 那么li_lei就被self表示。我们通过赋值给self.attribute，给li_lei这一对象增加一些性质，比如说性别的男女.
self会传递给各个方法。在方法内部，可以通过引用self.attribute，查询或修改对象的性质。
这样，在类属性的之外，又给每个对象增添了各自特色的性质，从而能描述多样的世界。


总结

通过self调用类属性

__init__(): 在建立对象时自动执行

类属性和对象的性质的区别





词典的常用方法

>>>print dic.keys()           # 返回dic所有的键

>>>print dic.values()         # 返回dic所有的值

>>>print dic.items()          # 返回dic所有的元素（键值对）

>>>dic.clear()                # 清空dic，dict变为{}

 

另外有一个很常用的用法：

>>>del dic['tom']             # 删除 dic 的‘tom’元素

del是Python中保留的关键字，用于删除对象。

 

与表类似，你可以用len()查询词典中的元素总数。

>>>print(len(dic))



总结

词典的每个元素是键值对。元素没有顺序。

dic = {'tom':11, 'sam':57,'lily':100}

dic['tom'] = 99

for key in dic: ...

del, len()




函数调用

先位置(tuple)，再包裹位置(*tuple)，再关键字(dict)，再包裹关键字(**dict)

def func(a=0,b=0,c=0,d=0,e=0,f=0,g=0):
    print (a,b,c,d,e,f,g)
args = (4,5)#b,c赋值
args1={'e':6,'d':7}#d,e赋值
func(1,*args,g=2,f=3,**args1)
 
#输出
1 4 5 7 6 3 2

func(1,*args,g=2,f=3,*args1)
#输出
1 4 5 e d 3 2
